# Makefile generated by imake - do not edit!
# $Xorg: imake.c,v 1.6 2001/02/09 02:03:15 xorgcvs Exp $

.SUFFIXES: .cpp .hpp .i

all::

# -------------------------Begin Machine Include-----------------------

LIBRARIES +=    -lmpi
INCLUDE_DIRS += -I$(MPIHOME)/include
LIBRARY_DIRS += -L$(MPIHOME)/lib

CC =  $(LAMPI_CC)
CPP = $(LAMPI_CCC)
LD =  $(LAMPI_CCLINKER)
AR = ar clq
RANLIB = ranlib
RM = rm -f

CCFLAGS  = -Wall -pedantic -ansi -O3 -fomit-frame-pointer -ffast-math -march=pentium4 -DRESTRICT=__restrict
CPPFLAGS =                       -O3 -fomit-frame-pointer -ffast-math -march=pentium4 -DRESTRICT=__restrict -DV4VERSION=v4_sse.hpp
LDFLAGS  = -Wall -pedantic -ansi -O3 -fomit-frame-pointer -ffast-math -march=pentium4 -DRESTRICT=__restrict
ARFLAGS  =

# -------------------------End Machine Include-------------------------

# -------------------------Begin Imakefile Include---------------------

LIBRARIES += -lm
INCLUDE_DIRS +=
LIBRARY_DIRS +=

ifneq (src/util/common,$(findstring src/util/common ,$(CLEAN_DIRS)))
CLEAN_DIRS += src/util/common
endif
ifneq (-Isrc/util/common,$(findstring -Isrc/util/common ,$(INCLUDE_DIRS)))
INCLUDE_DIRS += -Isrc/util/common
endif
common_OBJS = common
MODULE_SRCS += $(foreach obj,$(common_OBJS),src/util/common/$(obj).c)
MODULE_OBJS += $(foreach obj,$(common_OBJS),src/util/common/$(obj).o)
MODULE_ASMS += $(foreach obj,$(common_OBJS),src/util/common/$(obj).s)
MODULE_PPPS += $(foreach obj,$(common_OBJS),src/util/common/$(obj).i)

ifneq (src/util/mtrand,$(findstring src/util/mtrand ,$(CLEAN_DIRS)))
CLEAN_DIRS += src/util/mtrand
endif
ifneq (-Isrc/util/mtrand,$(findstring -Isrc/util/mtrand ,$(INCLUDE_DIRS)))
INCLUDE_DIRS += -Isrc/util/mtrand
endif
mtrand_OBJS = mtrand
MODULE_SRCS += $(foreach obj,$(mtrand_OBJS),src/util/mtrand/$(obj).c)
MODULE_OBJS += $(foreach obj,$(mtrand_OBJS),src/util/mtrand/$(obj).o)
MODULE_ASMS += $(foreach obj,$(mtrand_OBJS),src/util/mtrand/$(obj).s)
MODULE_PPPS += $(foreach obj,$(mtrand_OBJS),src/util/mtrand/$(obj).i)

ifneq (src/util/mp,$(findstring src/util/mp ,$(CLEAN_DIRS)))
CLEAN_DIRS += src/util/mp
endif
ifneq (-Isrc/util/mp,$(findstring -Isrc/util/mp ,$(INCLUDE_DIRS)))
INCLUDE_DIRS += -Isrc/util/mp
endif
mp_OBJS = mp
MODULE_SRCS += $(foreach obj,$(mp_OBJS),src/util/mp/$(obj).c)
MODULE_OBJS += $(foreach obj,$(mp_OBJS),src/util/mp/$(obj).o)
MODULE_ASMS += $(foreach obj,$(mp_OBJS),src/util/mp/$(obj).s)
MODULE_PPPS += $(foreach obj,$(mp_OBJS),src/util/mp/$(obj).i)

ifneq (src/util/v4,$(findstring src/util/v4 ,$(CLEAN_DIRS)))
CLEAN_DIRS += src/util/v4
endif
ifneq (-Isrc/util/v4,$(findstring -Isrc/util/v4 ,$(INCLUDE_DIRS)))
INCLUDE_DIRS += -Isrc/util/v4
endif
v4_OBJS =
MODULE_SRCS += $(foreach obj,$(v4_OBJS),src/util/v4/$(obj).cpp)
MODULE_OBJS += $(foreach obj,$(v4_OBJS),src/util/v4/$(obj).o)
MODULE_ASMS += $(foreach obj,$(v4_OBJS),src/util/v4/$(obj).s)
MODULE_PPPS += $(foreach obj,$(v4_OBJS),src/util/v4/$(obj).i)

ifneq (src/grid,$(findstring src/grid ,$(CLEAN_DIRS)))
CLEAN_DIRS += src/grid
endif
ifneq (-Isrc/grid,$(findstring -Isrc/grid ,$(INCLUDE_DIRS)))
INCLUDE_DIRS += -Isrc/grid
endif
grid_OBJS = ops partition structors add_boundary
MODULE_SRCS += $(foreach obj,$(grid_OBJS),src/grid/$(obj).c)
MODULE_OBJS += $(foreach obj,$(grid_OBJS),src/grid/$(obj).o)
MODULE_ASMS += $(foreach obj,$(grid_OBJS),src/grid/$(obj).s)
MODULE_PPPS += $(foreach obj,$(grid_OBJS),src/grid/$(obj).i)

ifneq (src/material,$(findstring src/material ,$(CLEAN_DIRS)))
CLEAN_DIRS += src/material
endif
ifneq (-Isrc/material,$(findstring -Isrc/material ,$(INCLUDE_DIRS)))
INCLUDE_DIRS += -Isrc/material
endif
material_OBJS = coefficient material
MODULE_SRCS += $(foreach obj,$(material_OBJS),src/material/$(obj).c)
MODULE_OBJS += $(foreach obj,$(material_OBJS),src/material/$(obj).o)
MODULE_ASMS += $(foreach obj,$(material_OBJS),src/material/$(obj).s)
MODULE_PPPS += $(foreach obj,$(material_OBJS),src/material/$(obj).i)

ifneq (src/field,$(findstring src/field ,$(CLEAN_DIRS)))
CLEAN_DIRS += src/field
endif
ifneq (-Isrc/field,$(findstring -Isrc/field ,$(INCLUDE_DIRS)))
INCLUDE_DIRS += -Isrc/field
endif
field_OBJS = accumulator advance_b advance_e div_b div_e energy_f interpolator local remote structors
MODULE_SRCS += $(foreach obj,$(field_OBJS),src/field/$(obj).c)
MODULE_OBJS += $(foreach obj,$(field_OBJS),src/field/$(obj).o)
MODULE_ASMS += $(foreach obj,$(field_OBJS),src/field/$(obj).s)
MODULE_PPPS += $(foreach obj,$(field_OBJS),src/field/$(obj).i)

ifneq (src/particle,$(findstring src/particle ,$(CLEAN_DIRS)))
CLEAN_DIRS += src/particle
endif
ifneq (-Isrc/particle,$(findstring -Isrc/particle ,$(INCLUDE_DIRS)))
INCLUDE_DIRS += -Isrc/particle
endif
particle_OBJS = boundary_p hydro_p move_p rho_p sort_p structors
MODULE_SRCS += $(foreach obj,$(particle_OBJS),src/particle/$(obj).c)
MODULE_OBJS += $(foreach obj,$(particle_OBJS),src/particle/$(obj).o)
MODULE_ASMS += $(foreach obj,$(particle_OBJS),src/particle/$(obj).s)
MODULE_PPPS += $(foreach obj,$(particle_OBJS),src/particle/$(obj).i)

ifneq (src/particle,$(findstring src/particle ,$(CLEAN_DIRS)))
CLEAN_DIRS += src/particle
endif
ifneq (-Isrc/particle,$(findstring -Isrc/particle ,$(INCLUDE_DIRS)))
INCLUDE_DIRS += -Isrc/particle
endif
particle_v4_OBJS = advance_p center_p energy_p uncenter_p
MODULE_SRCS += $(foreach obj,$(particle_v4_OBJS),src/particle/$(obj).cpp)
MODULE_OBJS += $(foreach obj,$(particle_v4_OBJS),src/particle/$(obj).o)
MODULE_ASMS += $(foreach obj,$(particle_v4_OBJS),src/particle/$(obj).s)
MODULE_PPPS += $(foreach obj,$(particle_v4_OBJS),src/particle/$(obj).i)

ifneq (src/species,$(findstring src/species ,$(CLEAN_DIRS)))
CLEAN_DIRS += src/species
endif
ifneq (-Isrc/species,$(findstring -Isrc/species ,$(INCLUDE_DIRS)))
INCLUDE_DIRS += -Isrc/species
endif
species_OBJS = species
MODULE_SRCS += $(foreach obj,$(species_OBJS),src/species/$(obj).c)
MODULE_OBJS += $(foreach obj,$(species_OBJS),src/species/$(obj).o)
MODULE_ASMS += $(foreach obj,$(species_OBJS),src/species/$(obj).s)
MODULE_PPPS += $(foreach obj,$(species_OBJS),src/species/$(obj).i)

ifneq (src/emitter,$(findstring src/emitter ,$(CLEAN_DIRS)))
CLEAN_DIRS += src/emitter
endif
ifneq (-Isrc/emitter,$(findstring -Isrc/emitter ,$(INCLUDE_DIRS)))
INCLUDE_DIRS += -Isrc/emitter
endif
emitter_OBJS = emitter child-langmuir ccube ivory
MODULE_SRCS += $(foreach obj,$(emitter_OBJS),src/emitter/$(obj).c)
MODULE_OBJS += $(foreach obj,$(emitter_OBJS),src/emitter/$(obj).o)
MODULE_ASMS += $(foreach obj,$(emitter_OBJS),src/emitter/$(obj).s)
MODULE_PPPS += $(foreach obj,$(emitter_OBJS),src/emitter/$(obj).i)

ifneq (src/boundary,$(findstring src/boundary ,$(CLEAN_DIRS)))
CLEAN_DIRS += src/boundary
endif
ifneq (-Isrc/boundary,$(findstring -Isrc/boundary ,$(INCLUDE_DIRS)))
INCLUDE_DIRS += -Isrc/boundary
endif
boundary_OBJS = maxwellian_reflux absorb_tally link
MODULE_SRCS += $(foreach obj,$(boundary_OBJS),src/boundary/$(obj).c)
MODULE_OBJS += $(foreach obj,$(boundary_OBJS),src/boundary/$(obj).o)
MODULE_ASMS += $(foreach obj,$(boundary_OBJS),src/boundary/$(obj).s)
MODULE_PPPS += $(foreach obj,$(boundary_OBJS),src/boundary/$(obj).i)

ifneq (src/vpic,$(findstring src/vpic ,$(CLEAN_DIRS)))
CLEAN_DIRS += src/vpic
endif
ifneq (-Isrc/vpic,$(findstring -Isrc/vpic ,$(INCLUDE_DIRS)))
INCLUDE_DIRS += -Isrc/vpic
endif
vpic_OBJS = advance dump initialize misc vpic
MODULE_SRCS += $(foreach obj,$(vpic_OBJS),src/vpic/$(obj).cpp)
MODULE_OBJS += $(foreach obj,$(vpic_OBJS),src/vpic/$(obj).o)
MODULE_ASMS += $(foreach obj,$(vpic_OBJS),src/vpic/$(obj).s)
MODULE_PPPS += $(foreach obj,$(vpic_OBJS),src/vpic/$(obj).i)

ifneq (.,$(findstring . ,$(CLEAN_DIRS)))
CLEAN_DIRS += .
endif

ifneq (src,$(findstring src ,$(CLEAN_DIRS)))
CLEAN_DIRS += src
endif

ifneq (machine,$(findstring machine ,$(CLEAN_DIRS)))
CLEAN_DIRS += machine
endif

ifneq (sample,$(findstring sample ,$(CLEAN_DIRS)))
CLEAN_DIRS += sample
endif

ifneq (sample/test,$(findstring sample/test ,$(CLEAN_DIRS)))
CLEAN_DIRS += sample/test
endif

ifneq (sample/bench,$(findstring sample/bench ,$(CLEAN_DIRS)))
CLEAN_DIRS += sample/bench
endif

ifneq (interfaces,$(findstring interfaces ,$(CLEAN_DIRS)))
CLEAN_DIRS += interfaces
endif

ifneq (interfaces/c,$(findstring interfaces/c ,$(CLEAN_DIRS)))
CLEAN_DIRS += interfaces/c
endif

ifneq (interfaces/fortran,$(findstring interfaces/fortran ,$(CLEAN_DIRS)))
CLEAN_DIRS += interfaces/fortran
endif

ifneq (interfaces/matlab,$(findstring interfaces/matlab ,$(CLEAN_DIRS)))
CLEAN_DIRS += interfaces/matlab
endif

ifneq (interfaces/idl,$(findstring interfaces/idl ,$(CLEAN_DIRS)))
CLEAN_DIRS += interfaces/idl
endif

# -------------------------End Imakefile Include-----------------------

all::		build.cy libvpic.cy.a $(EXEC)

clean:
		$(foreach dir,$(CLEAN_DIRS),$(RM) $(dir) $(dir) $(dir) $(dir)/.*.swp $(dir)/#* $(dir);)
		$(foreach exec,$(EXEC),$(RM) $(exec);)
		$(RM) ./libvpic.cy.a ./Makefile.bak
		$(RM) ./build.cy

veryclean:	clean
		$(RM) ./libvpic.*.a ./build.* ./Makefile ./bin

.c.o:
		$(CC) $(CCFLAGS) $(INCLUDE_DIRS) -c $*.c -o $*.o

.cpp.o:
		$(CPP) $(CPPFLAGS) $(INCLUDE_DIRS) -c $*.cpp -o $*.o

.c.i:
		$(CC) $(CCFLAGS) $(INCLUDE_DIRS) -E $*.c -o $*.i

.cpp.i:
		$(CPP) $(CPPFLAGS) $(INCLUDE_DIRS) -E $*.cpp -o $*.i

.c.s:
		$(CC) $(CCFLAGS) $(INCLUDE_DIRS) -S -fverbose-asm $*.c -o $*.s

.cpp.s:
		$(CPP) $(CPPFLAGS) $(INCLUDE_DIRS) -S -fverbose-asm $*.cpp -o $*.s

preprocessed:	$(MODULE_PPPS)

asm:		$(MODULE_ASMS)

libvpic.cy.a:	$(MODULE_OBJS)
		$(RM) ./libvpic.cy.a
		$(AR) $(ARFLAGS) ./libvpic.cy.a $(MODULE_OBJS)
		$(RANLIB) ./libvpic.cy.a

build.cy:	libvpic.cy.a
		echo "#!/bin/sh" > build.cy
		echo export INPUT_DECK_DIR='`pwd`' >> build.cy
		echo "pushd . >& /dev/null" >> build.cy
		echo cd $(PWD) >> build.cy
		echo $(CPP) $(CPPFLAGS) $(INCLUDE_DIRS) src/main.cpp src/deck_wrapper.cpp -DINPUT_DECK='$$INPUT_DECK_DIR/$$1' -o '$$INPUT_DECK_DIR/$$1'.cy $(LIBRARY_DIRS) -L. -lvpic.cy $(LIBRARIES) >> build.cy
		echo "popd >& /dev/null" >> build.cy
		chmod u+x build.cy

