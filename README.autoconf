################################################################################
# Autoconf build system README
################################################################################

# Dependencies
VPIC need MPI to run.  Look at the standard machine file in 'machine/standard'
for an example of how VPIC uses the MPI libraries.  If you are on a machine
with environment modules installed, it is generally sufficient to just
load openmpi.

# Bootstrap
To build the buildsystem run (from the top-level directory):

% config/bootstrap

This will run the appropriate programs to create the build system.

# Configuration
The autoconf buildsystem mimics the original Imake setup, allowing the user to
specify a machine file.  There are several examples in the machine directory.
To configure a standard, 64-bit VPIC build that uses SSE and basic optimization
try:

% ./configure --with-machine=standard_64

configure will pick up a machine file named 'machine' that is in the
directory from which configure is called (no need to specify one).

The build system supports out-of-tree builds.  This is convenient for making
several different configurations in separate directories.  As an example, try
something like:

(in top-level VPIC directory)
% mkdir -p build/standard_64
% cp machine/standard build/standard_64
% cd build/machine
% ../../configure

# Build
Either of these configure options will produce some output, and will create
the files needed to build VPIC.  To compile, try:

(from wherever you ran configure)
% make

To run the unit tests, do
% make check
