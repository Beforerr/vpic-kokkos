// Benchmark advance_p
//
// Written by:
//   Kevin J. Bowers, Ph.D.
//   Plasma Physics Group (X-1)
//   Applied Physics Division
//   Los Alamos National Lab
// March/April 2004 - Adapted into input deck format and heavily revised from
//                    earlier V4PIC versions

begin_globals {
};

begin_initialization {
  if( num_cmdline_arguments != 3 ) {
    sim_log( "Usage: " << cmdline_argument[0] << " local_np n_step" );
    abort(0);
  }

  double L = 1e10; // Make cell so large particles will not leave 
  double local_np = atof(cmdline_argument[1]);
  double n_step   = atof(cmdline_argument[2]);

  define_periodic_grid( 0, 0, 0,         // Grid low corner
                        L, L, L,         // Grid high corner
                        nproc(), 1, 1,   // Grid resolution
                        nproc(), 1, 1 ); // Processor topology
  grid->dt   = 1;
  grid->cvac = 1;
  grid->eps0 = 1;
  grid->damp = 0;
 
  define_material("vacuum",1.0,1.0,0.0);
  finalize_materials();

  species_id test_species = define_species("test_species",1,local_np);
  finalize_species();

  repeat( local_np ) {
    error_code err = inject_particle( test_species,
                             grid->x0+uniform_rand(0,grid->dx*grid->nx),
                                      uniform_rand(0,L),
                                      uniform_rand(0,L),
                                      maxwellian_rand(1),
                                      maxwellian_rand(1),
                                      maxwellian_rand(1),
                                      uniform_rand(0,1) );
    if( err ) sim_log("Injection error - " << err);
  }

  species_t *sp = find_species_name( "test_species", species_list );

  // Warm up the caches
  repeat(2)
    advance_p( sp->p, sp->np, sp->q_m, sp->pm, sp->max_nm,
               accumulator, interpolator, grid );
  barrier();

  // Do the benchmark
  double overhead = time00();
  repeat(n_step) {
    advance_p( sp->p, sp->np, sp->q_m, sp->pm, sp->max_nm,
               accumulator, interpolator, grid );
    barrier();
  }
  double elapsed = time00() - overhead;

  sim_log( (double)local_np*(double)nproc()*(double)n_step/elapsed/1e6 );
  
  exit(0);
}

begin_diagnostics {
}

begin_particle_injection {
}

begin_current_injection {
}

begin_field_injection {
}

