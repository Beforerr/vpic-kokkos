#ifndef __ADVANCE_P_HELPERS
#define __ADVNACE_P_HELPERS
#include "../../vpic/kokkos_helpers.h"
#include "../../vpic/kokkos_tuning.hpp"

#ifdef __AVX512F__
KOKKOS_INLINE_FUNCTION
void transpose(float* ALIGNED(16) v00, float* ALIGNED(16) v01, float* ALIGNED(16) v02, float* ALIGNED(16) v03,
               float* ALIGNED(16) v04, float* ALIGNED(16) v05, float* ALIGNED(16) v06, float* ALIGNED(16) v07,
               float* ALIGNED(16) v08, float* ALIGNED(16) v09, float* ALIGNED(16) v10, float* ALIGNED(16) v11,
               float* ALIGNED(16) v12, float* ALIGNED(16) v13, float* ALIGNED(16) v14, float* ALIGNED(16) v15) {
  __m512 a00, a01, a02, a03, a04, a05, a06, a07, a08, a09, a10, a11, a12, a13, a14, a15;

  a00 = _mm512_load_ps(v00);
  a01 = _mm512_load_ps(v01);
  a02 = _mm512_load_ps(v02);
  a03 = _mm512_load_ps(v03);
  a04 = _mm512_load_ps(v04);
  a05 = _mm512_load_ps(v05);
  a06 = _mm512_load_ps(v06);
  a07 = _mm512_load_ps(v07);
  a08 = _mm512_load_ps(v08);
  a09 = _mm512_load_ps(v09);
  a10 = _mm512_load_ps(v10);
  a11 = _mm512_load_ps(v11);
  a12 = _mm512_load_ps(v12);
  a13 = _mm512_load_ps(v13);
  a14 = _mm512_load_ps(v14);
  a15 = _mm512_load_ps(v15);

  __m512 t00, t01, t02, t03, t04, t05, t06, t07, t08, t09, t10, t11, t12, t13, t14, t15;
  // Start                                 a00 =   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15
  //                                       a01 =  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30  31
  //                                       a02 =  32  33  34  35  36  37  38  39  40  41  42  43  44  45  46  47
  //                                       a03 =  48  49  50  51  52  53  54  55  56  57  58  59  60  61  62  63
  //                                       a04 =  64  65  66  67  68  69  70  71  72  73  74  75  76  77  78  79
  //                                       a05 =  80  81  82  83  84  85  86  87  88  89  90  91  92  93  94  95
  //                                       a06 =  96  97  98  99 100 101 102 103 104 105 106 107 108 109 110 111
  //                                       a07 = 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127
  //                                       a08 = 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143
  //                                       a09 = 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159
  //                                       a10 = 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175
  //                                       a11 = 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191
  //                                       a12 = 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207
  //                                       a13 = 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223
  //                                       a14 = 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239
  //                                       a15 = 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255
  
  t00   = _mm512_unpacklo_ps( a00, a01 ); //   0  16   1  17   4  20   5  21   8  24   9  25  12  28  13  29 
  t01   = _mm512_unpackhi_ps( a00, a01 ); //   2  18   3  19   6  22   7  23  10  26  11  27  14  30  15  31
  t02   = _mm512_unpacklo_ps( a02, a03 ); //  32  48  33  49  36  52  37  53  40  56  41  57  44  60  45  61
  t03   = _mm512_unpackhi_ps( a02, a03 ); //  34  50  35  51  38  54  39  55  42  58  43  59  46  62  47  63
  t04   = _mm512_unpacklo_ps( a04, a05 ); //  64  80  65  81  68  84  69  85  72  88  73  89  76  92  77  93
  t05   = _mm512_unpackhi_ps( a04, a05 ); //  66  82  67  83  70  86  71  87  74  90  75  91  78  94  79  95
  t06   = _mm512_unpacklo_ps( a06, a07 ); //  96 112  97 113 100 116 101 117 104 120 105 121 108 124 109 125
  t07   = _mm512_unpackhi_ps( a06, a07 ); //  98 114  99 115 102 118 103 119 106 122 107 123 110 126 111 127
  t08   = _mm512_unpacklo_ps( a08, a09 ); // 128 144 129 145 132 148 133 149 136 152 137 153 140 156 141 157
  t09   = _mm512_unpackhi_ps( a08, a09 ); // 130 146 131 147 134 150 135 151 138 154 139 155 142 158 143 159
  t10   = _mm512_unpacklo_ps( a10, a11 ); // 160 176 161 177 164 180 165 181 168 184 169 185 172 188 173 189
  t11   = _mm512_unpackhi_ps( a10, a11 ); // 162 178 163 179 166 182 167 183 170 186 171 187 174 190 175 191
  t12   = _mm512_unpacklo_ps( a12, a13 ); // 192 208 193 209 196 212 197 213 200 216 201 217 204 220 205 221
  t13   = _mm512_unpackhi_ps( a12, a13 ); // 194 210 195 211 198 214 199 215 202 218 203 219 206 222 207 223
  t14   = _mm512_unpacklo_ps( a14, a15 ); // 224 240 225 241 228 244 229 245 232 248 233 249 236 252 237 253
  t15   = _mm512_unpackhi_ps( a14, a15 ); // 226 242 227 243 230 246 231 247 234 250 235 251 238 254 239 255

  a00 = _mm512_shuffle_ps( t00, t02, _MM_SHUFFLE( 1, 0, 1, 0 ) );  //   0  16  32  48 
  a01 = _mm512_shuffle_ps( t00, t02, _MM_SHUFFLE( 3, 2, 3, 2 ) );  //   1  17  33  49 
  a02 = _mm512_shuffle_ps( t01, t03, _MM_SHUFFLE( 1, 0, 1, 0 ) );  //   2  18  34  50 
  a03 = _mm512_shuffle_ps( t01, t03, _MM_SHUFFLE( 3, 2, 3, 2 ) );  //   3  19  35  51 
  a04 = _mm512_shuffle_ps( t04, t06, _MM_SHUFFLE( 1, 0, 1, 0 ) );  //  64  80  96 112 
  a05 = _mm512_shuffle_ps( t04, t06, _MM_SHUFFLE( 3, 2, 3, 2 ) );  //  65  81  97 113 
  a06 = _mm512_shuffle_ps( t05, t07, _MM_SHUFFLE( 1, 0, 1, 0 ) );  //  66  82  98 114 
  a07 = _mm512_shuffle_ps( t05, t07, _MM_SHUFFLE( 3, 2, 3, 2 ) );  //  67  83  99 115 
  a08 = _mm512_shuffle_ps( t08, t10, _MM_SHUFFLE( 1, 0, 1, 0 ) );  // 128 144 160 176 
  a09 = _mm512_shuffle_ps( t08, t10, _MM_SHUFFLE( 3, 2, 3, 2 ) );  // 129 145 161 177 
  a10 = _mm512_shuffle_ps( t09, t11, _MM_SHUFFLE( 1, 0, 1, 0 ) );  // 130 146 162 178 
  a11 = _mm512_shuffle_ps( t09, t11, _MM_SHUFFLE( 3, 2, 3, 2 ) );  // 131 147 163 179 
  a12 = _mm512_shuffle_ps( t12, t14, _MM_SHUFFLE( 1, 0, 1, 0 ) );  // 192 208 228 240 
  a13 = _mm512_shuffle_ps( t12, t14, _MM_SHUFFLE( 3, 2, 3, 2 ) );  // 193 209 229 241 
  a14 = _mm512_shuffle_ps( t13, t15, _MM_SHUFFLE( 1, 0, 1, 0 ) );  // 194 210 230 242 
  a15 = _mm512_shuffle_ps( t13, t15, _MM_SHUFFLE( 3, 2, 3, 2 ) );  // 195 211 231 243 

  t00   = _mm512_shuffle_f32x4( a00, a04, 0x88 ); //   0  16  32  48   8  24  40  56  64  80  96  112 ...
  t01   = _mm512_shuffle_f32x4( a01, a05, 0x88 ); //   1  17  33  49 ...
  t02   = _mm512_shuffle_f32x4( a02, a06, 0x88 ); //   2  18  34  50 ...
  t03   = _mm512_shuffle_f32x4( a03, a07, 0x88 ); //   3  19  35  51 ...
  t04   = _mm512_shuffle_f32x4( a00, a04, 0xdd ); //   4  20  36  52 ...
  t05   = _mm512_shuffle_f32x4( a01, a05, 0xdd ); //   5  21  37  53 ...
  t06   = _mm512_shuffle_f32x4( a02, a06, 0xdd ); //   6  22  38  54 ...
  t07   = _mm512_shuffle_f32x4( a03, a07, 0xdd ); //   7  23  39  55 ...
  t08   = _mm512_shuffle_f32x4( a08, a12, 0x88 ); // 128 144 160 176 ...
  t09   = _mm512_shuffle_f32x4( a09, a13, 0x88 ); // 129 145 161 177 ...
  t10   = _mm512_shuffle_f32x4( a10, a14, 0x88 ); // 130 146 162 178 ...
  t11   = _mm512_shuffle_f32x4( a11, a15, 0x88 ); // 131 147 163 179 ...
  t12   = _mm512_shuffle_f32x4( a08, a12, 0xdd ); // 132 148 164 180 ...
  t13   = _mm512_shuffle_f32x4( a09, a13, 0xdd ); // 133 149 165 181 ...
  t14   = _mm512_shuffle_f32x4( a10, a14, 0xdd ); // 134 150 166 182 ...
  t15   = _mm512_shuffle_f32x4( a11, a15, 0xdd ); // 135 151 167 183 ...

  a00 = _mm512_shuffle_f32x4( t00, t08, 0x88 ); //   0  16  32  48  64  80  96 112 ... 240
  a01 = _mm512_shuffle_f32x4( t01, t09, 0x88 ); //   1  17  33  49  66  81  97 113 ... 241
  a02 = _mm512_shuffle_f32x4( t02, t10, 0x88 ); //   2  18  34  50  67  82  98 114 ... 242
  a03 = _mm512_shuffle_f32x4( t03, t11, 0x88 ); //   3  19  35  51  68  83  99 115 ... 243
  a04 = _mm512_shuffle_f32x4( t04, t12, 0x88 ); //   4 ...
  a05 = _mm512_shuffle_f32x4( t05, t13, 0x88 ); //   5 ...
  a06 = _mm512_shuffle_f32x4( t06, t14, 0x88 ); //   6 ...
  a07 = _mm512_shuffle_f32x4( t07, t15, 0x88 ); //   7 ...
  a08 = _mm512_shuffle_f32x4( t00, t08, 0xdd ); //   8 ...
  a09 = _mm512_shuffle_f32x4( t01, t09, 0xdd ); //   9 ...
  a10 = _mm512_shuffle_f32x4( t02, t10, 0xdd ); //  10 ...
  a11 = _mm512_shuffle_f32x4( t03, t11, 0xdd ); //  11 ...
  a12 = _mm512_shuffle_f32x4( t04, t12, 0xdd ); //  12 ...
  a13 = _mm512_shuffle_f32x4( t05, t13, 0xdd ); //  13 ...
  a14 = _mm512_shuffle_f32x4( t06, t14, 0xdd ); //  14 ...
  a15 = _mm512_shuffle_f32x4( t07, t15, 0xdd ); //  15  31  47  63  79  96 111 127 ... 255

  _mm512_store_ps(v00, a00);
  _mm512_store_ps(v01, a01);
  _mm512_store_ps(v02, a02);
  _mm512_store_ps(v03, a03);
  _mm512_store_ps(v04, a04);
  _mm512_store_ps(v05, a05);
  _mm512_store_ps(v06, a06);
  _mm512_store_ps(v07, a07);
  _mm512_store_ps(v08, a08);
  _mm512_store_ps(v09, a09);
  _mm512_store_ps(v10, a10);
  _mm512_store_ps(v11, a11);
  _mm512_store_ps(v12, a12);
  _mm512_store_ps(v13, a13);
  _mm512_store_ps(v14, a14);
  _mm512_store_ps(v15, a15);
}
#else

void KOKKOS_INLINE_FUNCTION sw(float& x, float& y) {
  float temp = x;
  x = y;
  y = temp;
}
void transpose_port( float* v0, float* v1, float* v2, float* v3,
                float* v4, float* v5, float* v6, float* v7,
                float* v8, float* v9, float* v10, float* v11,
                float* v12, float* v13, float* v14, float* v15) {
  sw(v0[1], v1[0]); sw(v0[2], v2[0]); sw(v0[3], v3[0]); sw(v0[4], v4[0]); sw(v0[5], v5[0]); sw(v0[6], v6[0]); sw(v0[7], v7[0]); sw(v0[8], v8[0]); sw(v0[9], v9[0]); sw(v0[10], v10[0]); sw(v0[11], v11[0]); sw(v0[12], v12[0]); sw(v0[13], v13[0]); sw(v0[14], v14[0]); sw(v0[15], v15[0]);
                    sw(v1[2], v2[1]); sw(v1[3], v3[1]); sw(v1[4], v4[1]); sw(v1[5], v5[1]); sw(v1[6], v6[1]); sw(v1[7], v7[1]); sw(v1[8], v8[1]); sw(v1[9], v9[1]); sw(v1[10], v10[1]); sw(v1[11], v11[1]); sw(v1[12], v12[1]); sw(v1[13], v13[1]); sw(v1[14], v14[1]); sw(v1[15], v15[1]);
                                      sw(v2[3], v3[2]); sw(v2[4], v4[2]); sw(v2[5], v5[2]); sw(v2[6], v6[2]); sw(v2[7], v7[2]); sw(v2[8], v8[2]); sw(v2[9], v9[2]); sw(v2[10], v10[2]); sw(v2[11], v11[2]); sw(v2[12], v12[2]); sw(v2[13], v13[2]); sw(v2[14], v14[2]); sw(v2[15], v15[2]);
                                                        sw(v3[4], v4[3]); sw(v3[5], v5[3]); sw(v3[6], v6[3]); sw(v3[7], v7[3]); sw(v3[8], v8[3]); sw(v3[9], v9[3]); sw(v3[10], v10[3]); sw(v3[11], v11[3]); sw(v3[12], v12[3]); sw(v3[13], v13[3]); sw(v3[14], v14[3]); sw(v3[15], v15[3]);
                                                                          sw(v4[5], v5[4]); sw(v4[6], v6[4]); sw(v4[7], v7[4]); sw(v4[8], v8[4]); sw(v4[9], v9[4]); sw(v4[10], v10[4]); sw(v4[11], v11[4]); sw(v4[12], v12[4]); sw(v4[13], v13[4]); sw(v4[14], v14[4]); sw(v4[15], v15[4]);
                                                                                            sw(v5[6], v6[5]); sw(v5[7], v7[5]); sw(v5[8], v8[5]); sw(v5[9], v9[5]); sw(v5[10], v10[5]); sw(v5[11], v11[5]); sw(v5[12], v12[5]); sw(v5[13], v13[5]); sw(v5[14], v14[5]); sw(v5[15], v15[5]);
                                                                                                              sw(v6[7], v7[6]); sw(v6[8], v8[6]); sw(v6[9], v9[6]); sw(v6[10], v10[6]); sw(v6[11], v11[6]); sw(v6[12], v12[6]); sw(v6[13], v13[6]); sw(v6[14], v14[6]); sw(v6[15], v15[6]);
                                                                                                                                sw(v7[8], v8[7]); sw(v7[9], v9[7]); sw(v7[10], v10[7]); sw(v7[11], v11[7]); sw(v7[12], v12[7]); sw(v7[13], v13[7]); sw(v7[14], v14[7]); sw(v7[15], v15[7]);
                                                                                                                                                  sw(v8[9], v9[8]); sw(v8[10], v10[8]); sw(v8[11], v11[8]); sw(v8[12], v12[8]); sw(v8[13], v13[8]); sw(v8[14], v14[8]); sw(v8[15], v15[8]);
                                                                                                                                                                   sw(v9[10], v10[9]); sw(v9[11], v11[9]); sw(v9[12], v12[9]); sw(v9[13], v13[9]); sw(v9[14], v14[9]); sw(v9[15], v15[9]);
                                                                                                                                                                                       sw(v10[11], v11[10]); sw(v10[12], v12[10]); sw(v10[13], v13[10]); sw(v10[14], v14[10]); sw(v10[15], v15[10]);
                                                                                                                                                                                                           sw(v11[12], v12[11]); sw(v11[13], v13[11]); sw(v11[14], v14[11]); sw(v11[15], v15[11]);
                                                                                                                                                                                                                               sw(v12[13], v13[12]); sw(v12[14], v14[12]); sw(v12[15], v15[12]);
                                                                                                                                                                                                                                                    sw(v13[14], v14[13]); sw(v13[15], v15[13]);
                                                                                                                                                                                                                                                                        sw(v14[15], v15[14]);
}
#endif

#endif
